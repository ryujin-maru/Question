<?php

namespace App\Http\Controllers\User;

use App\Http\Controllers\Controller;
use App\Models\Question;
use App\Models\T_user;
use Illuminate\Http\Request;
use App\Http\Services\AnswerService;
use App\Models\Stock;
use Illuminate\Support\Facades\Mail;
use App\Mail\SendMail;

class AnswerController extends Controller
{
    // session情報
    private $idno;
    // ユーザー情報
    private $user;

    public function __construct(Request $request)
    {
        //セッション確認、無かったらMMへ遷移
        $idno = $request->session()->get('idno');
        if(is_null($idno)) {
            abort(redirect('https://shop.amint.co.jp/members/supplement'));
        }

        $user = T_user::where('idno',$idno)->orderBy('id','desc')->first();

        $this->idno = $idno;
        $this->user = $user;
    }

    // 問題表示
    public function index(Request $request,AnswerService $answerService) {
        //適切な問題を取得して表示
        // $idno = $request->session()->get('idno');
        $array = $answerService->return_Q($this->idno);
        list($data,$user_detail) = $array;

        //本番は101
        if($user_detail->counter >= 21) {
            return to_route('user.grade');
        }


        return view('user.question',compact('data','user_detail'));
    }


    // 回答したときの処理
    public function deal(Request $request) {

        // 不正解の問題をストックテーブルに保存
        $idno = $request->session()->get('idno');
        $user = T_user::where('idno',$idno)->orderBy('id','desc')->first();

        //本番は101
        if($user->counter >= 21) {
            return to_route('user.grade');
        }

        for($i = $user->counter;$i < $user->counter+5;$i++) {
            $question = Question::where('num',$i)->with('answer')->first();
            if($question->answer->correct !== $request->$i) {

                $wrong = Stock::where('t_user_id',$user->id)->where('answer_id',$question->answer->id)->orderBy('created_at','desc')->first();

                if(is_null($wrong)) {
                    // stockに値がなかったら作成
                    $stock = Stock::create([
                        'answer_id' => $question->answer->id,
                        't_user_id' => $user->id,
                        'select' => $request->$i
                    ]);
                }else{
                    // stockに値があったら更新
                    $wrong->select = $request->$i;
                    $wrong->save();
                }

            }else{
                $wrong = Stock::where('t_user_id',$user->id)->where('answer_id',$question->answer->id)->orderBy('updated_at','desc')->first();

                // 不正解の問題があり、正解したら値を削除
                if(!is_null($wrong)) {
                    $wrong->delete();
                }

            }
        }

        // t_user更新
        if($user->counter == $user->already) {
            $user->already = $user->already + 5;
        }
        $user->counter = $user->counter + 5;
        $user->save();

        // 回答終了 本番環境は101
        if($user->counter >= 21) {
            return to_route('user.grade');
        }

        return to_route('user.answer');
    }

    // 戻るボタンを押したとき
    public function back(Request $request) {
        $idno = $request->session()->get('idno');
        $user = T_user::where('idno',$idno)->orderBy('id','desc')->first();

        // 本番環境は101
        // if($user->already !== 21) {
        //     return to_route('user.answer');
        // }

        // 回答終了 本番環境は101
        if($user->counter >= 21) {
            return to_route('user.grade');
        }

        $user->counter = $user->counter - 5;
        $user->save();
        return to_route('user.answer');
    }

    // 正答判定結果
    public function grade(Request $request) {
        dd($this->user);
        $idno = $request->session()->get('idno');
        $user = T_user::where('idno',$idno)->orderBy('id','desc')->first();

        $stocks = Stock::where('t_user_id',$user->id)->get();
        dd($this->idno);

        // 本番環境は101
        if($user->already !== 21) {
            return to_route('user.answer');
        }
        

        if(count($stocks) <= 10) {
            // 合格メール送信プログラム記述
            $data = [
                'name' => $user->name,
                'name_kana' => $user->name_kana,
                'email' => $user->email,
            ];

            if($user->pass_fail !== 2 ) {
                $fail = Mail::to($data['email'])->send(new SendMail($data));
            }

            $user->pass_fail = 2;
            $user->save();

            $pass_fail = 2;
        }else{
            $pass_fail = 1;
        }

        return view('user.mail.complete',compact('pass_fail'));
    }

    public function restart() {

        return view('user.reanswer');
    }

}


